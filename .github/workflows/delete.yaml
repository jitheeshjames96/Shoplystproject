name: Delete CloudFormation Stack

on:
  workflow_dispatch:
    inputs:
      stack:
        description: "Stack name"
        required: true
        default: shoplyst-stack
      environment:
        description: "Environment (e.g., dev, prod)"
        required: true
        default: dev

jobs:
  delete:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Delete CloudFormation Stack
      run: |
        STACK_NAME=${{ github.event.inputs.stack }}-${{ github.event.inputs.environment }}
        echo "üóëÔ∏è Deleting stack: $STACK_NAME"
        aws cloudformation delete-stack --stack-name $STACK_NAME

    - name: Monitor Deletion with Tabular Events (All Stacks)
      run: |
        STACK_NAME=${{ github.event.inputs.stack }}-${{ github.event.inputs.environment }}

        get_nested_stacks() {
          aws cloudformation describe-stack-resources \
            --stack-name $1 \
            --query "StackResources[?ResourceType=='AWS::CloudFormation::Stack'].PhysicalResourceId" \
            --output text
        }

        print_stack_events() {
          local stack=$1
          echo "üìã Events for stack: $stack"
          aws cloudformation describe-stack-events \
            --stack-name "$stack" \
            --max-items 10 \
            --query 'StackEvents[?ResourceStatus!=`DELETE_COMPLETE`].[Timestamp, LogicalResourceId, ResourceType, ResourceStatus, ResourceStatusReason]' \
            --output table || true
        }

        echo "‚åõ Monitoring deletion of stack: $STACK_NAME"
        while true; do
          # Print latest stack events
          print_stack_events "$STACK_NAME"
          for nested in $(get_nested_stacks "$STACK_NAME"); do
            print_stack_events "$nested"
          done

          # Check status
          STATUS=$(aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --query "Stacks[0].StackStatus" \
            --output text 2>/dev/null || echo "DELETE_COMPLETE")

          if [[ "$STATUS" == "DELETE_COMPLETE" ]]; then
            echo "‚úÖ Stack deleted successfully."
            break
          elif [[ "$STATUS" == "DELETE_IN_PROGRESS" ]]; then
            echo "üßπ Still deleting... ($STATUS)"
            sleep 20
          else
            echo "‚ùå Unexpected status or deletion failed: $STATUS"
            exit 1
          fi
        done
